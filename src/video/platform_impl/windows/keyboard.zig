const windows_platform = @import("windows.zig");

const win32 = @import("win32");

const keyboard = @import("../../keyboard.zig");

const lang_japanese = win32.system.system_services.LANG_JAPANESE;
const lang_korean = win32.system.system_services.LANG_KOREAN;
const kam = win32.ui.input.keyboard_and_mouse;
const hkl = win32.ui.text_services.HKL;
const z32 = win32.zig;

pub fn toScanCode(k: keyboard.KeyCode) ?u32 {
    const this_hkl = win32.ui.text_services.GetKeyboardLayout(0);

    const primary_lang_id = windows_platform.getPrimaryLangId(@intFromPtr(this_hkl));
    const is_korean = @as(u32, @intCast(primary_lang_id)) == lang_korean;

    return switch (k) {
        .backquote => 0x0029,
        .backslash => 0x002B,
        .backspace => 0x000E,
        .bracket_left => 0x001A,
        .bracket_right => 0x001B,
        .comma => 0x0033,
        .d0 => 0x000B,
        .d1 => 0x0002,
        .d2 => 0x0003,
        .d3 => 0x0004,
        .d4 => 0x0005,
        .d5 => 0x0006,
        .d6 => 0x0007,
        .d7 => 0x0008,
        .d8 => 0x0009,
        .d9 => 0x000A,
        .equal => 0x000D,
        .international_backslash => 0x0056,
        .international_ro => 0x0073,
        .international_yen => 0x007D,
        .key_a => 0x001E,
        .key_b => 0x0030,
        .key_c => 0x002E,
        .key_d => 0x0020,
        .key_e => 0x0012,
        .key_f => 0x0021,
        .key_g => 0x0022,
        .key_h => 0x0023,
        .key_i => 0x0017,
        .key_j => 0x0024,
        .key_k => 0x0025,
        .key_l => 0x0026,
        .key_m => 0x0032,
        .key_n => 0x0031,
        .key_o => 0x0018,
        .key_p => 0x0019,
        .key_q => 0x0010,
        .key_r => 0x0013,
        .key_s => 0x001F,
        .key_t => 0x0014,
        .key_u => 0x0016,
        .key_v => 0x002F,
        .key_w => 0x0011,
        .key_x => 0x002D,
        .key_y => 0x0015,
        .key_z => 0x002C,
        .minus => 0x000C,
        .period => 0x0034,
        .quote => 0x0028,
        .semicolon => 0x0027,
        .slash => 0x0035,
        .alt_left => 0x0038,
        .alt_right => 0xE038,
        .caps_lock => 0x003A,
        .context_menu => 0xE05D,
        .control_left => 0x001D,
        .control_right => 0xE01D,
        .enter => 0x001C,
        .super_left => 0xE05B,
        .super_right => 0xE05C,
        .shift_left => 0x002A,
        .shift_right => 0x0036,
        .space => 0x0039,
        .tab => 0x000F,
        .convert => 0x0079,
        .lang1 => blk: {
            if (is_korean) {
                break :blk 0xE0F2;
            } else {
                break :blk 0x0072;
            }
        },
        .lang2 => blk: {
            if (is_korean) {
                break :blk 0xE0F1;
            } else {
                break :blk 0x0071;
            }
        },
        .kana_mode => 0x0070,
        .non_convert => 0x007B,
        .delete => 0xE053,
        .end => 0xE04F,
        .home => 0xE047,
        .insert => 0xE052,
        .page_down => 0xE051,
        .page_up => 0xE049,
        .arrow_down => 0xE050,
        .arrow_left => 0xE04B,
        .arrow_right => 0xE04D,
        .arrow_up => 0xE048,
        .num_lock => 0xE045,
        .numpad0 => 0x0052,
        .numpad1 => 0x004F,
        .numpad2 => 0x0050,
        .numpad3 => 0x0051,
        .numpad4 => 0x004B,
        .numpad5 => 0x004C,
        .numpad6 => 0x004D,
        .numpad7 => 0x0047,
        .numpad8 => 0x0048,
        .numpad9 => 0x0049,
        .numpad_add => 0x004E,
        .numpad_comma => 0x007E,
        .numpad_decimal => 0x0053,
        .numpad_divide => 0xE035,
        .numpad_enter => 0xE01C,
        .numpad_equal => 0x0059,
        .numpad_multiply => 0x0037,
        .numpad_subtract => 0x004A,
        .escape => 0x0001,
        .f1 => 0x003B,
        .f2 => 0x003C,
        .f3 => 0x003D,
        .f4 => 0x003E,
        .f5 => 0x003F,
        .f6 => 0x0040,
        .f7 => 0x0041,
        .f8 => 0x0042,
        .f9 => 0x0043,
        .f10 => 0x0044,
        .f11 => 0x0057,
        .f12 => 0x0058,
        .f13 => 0x0064,
        .f14 => 0x0065,
        .f15 => 0x0066,
        .f16 => 0x0067,
        .f17 => 0x0068,
        .f18 => 0x0069,
        .f19 => 0x006A,
        .f20 => 0x006B,
        .f21 => 0x006C,
        .f22 => 0x006D,
        .f23 => 0x006E,
        .f24 => 0x0076,
        .print_screen => 0xE037,
        //.print_screen => 0x0054, // Alt + PrintScreen
        .scroll_lock => 0x0046,
        .pause => 0x0045,
        //.pause => 0xE046, // Ctrl + Pause
        .browser_back => 0xE06A,
        .browser_favorites => 0xE066,
        .browser_forward => 0xE069,
        .browser_home => 0xE032,
        .browser_refresh => 0xE067,
        .browser_search => 0xE065,
        .browser_stop => 0xE068,
        .launch_app1 => 0xE06B,
        .launch_app2 => 0xE021,
        .launch_mail => 0xE06C,
        .media_play_pause => 0xE022,
        .media_select => 0xE06D,
        .media_stop => 0xE024,
        .media_track_next => 0xE019,
        .media_track_previous => 0xE010,
        .power => 0xE05E,
        .audio_volume_down => 0xE02E,
        .audio_volume_mute => 0xE020,
        .audio_volume_up => 0xE030,
        .unidentified => |native| blk: {
            switch (native) {
                .windows => |scancode| {
                    break :blk @intCast(scancode);
                },
                else => {},
            }
        },
        else => {},
    };
}

pub fn fromScanCode(scancode: u32) keyboard.KeyCode {
    return switch (scancode) {
        0x0029 => .backquote,
        0x002B => .backslash,
        0x000E => .backspace,
        0x001A => .bracket_left,
        0x001B => .bracket_right,
        0x0033 => .comma,
        0x000B => .d0,
        0x0002 => .d1,
        0x0003 => .d2,
        0x0004 => .d3,
        0x0005 => .d4,
        0x0006 => .d5,
        0x0007 => .d6,
        0x0008 => .d7,
        0x0009 => .d8,
        0x000A => .d9,
        0x000D => .equal,
        0x0056 => .international_backslash,
        0x0073 => .international_ro,
        0x007D => .international_yen,
        0x001E => .key_a,
        0x0030 => .key_b,
        0x002E => .key_c,
        0x0020 => .key_d,
        0x0012 => .key_e,
        0x0021 => .key_f,
        0x0022 => .key_g,
        0x0023 => .key_h,
        0x0017 => .key_i,
        0x0024 => .key_j,
        0x0025 => .key_k,
        0x0026 => .key_l,
        0x0032 => .key_m,
        0x0031 => .key_n,
        0x0018 => .key_o,
        0x0019 => .key_p,
        0x0010 => .key_q,
        0x0013 => .key_r,
        0x001F => .key_s,
        0x0014 => .key_t,
        0x0016 => .key_u,
        0x002F => .key_v,
        0x0011 => .key_w,
        0x002D => .key_x,
        0x001 => .key_y,
        0x002C => .key_z,
        0x000C => .minus,
        0x0034 => .period,
        0x0028 => .quote,
        0x0027 => .semicolon,
        0x0035 => .slash,
        0x0038 => .alt_left,
        0xE038 => .alt_right,
        0x003A => .caps_lock,
        0xE05D => .context_menu,
        0x001D => .control_left,
        0xE01D => .control_right,
        0x001C => .enter,
        0xE05B => .super_left,
        0xE05C => .super_right,
        0x002A => .shift_left,
        0x0036 => .shift_right,
        0x0039 => .space,
        0x000F => .tab,
        0x0079 => .convert,
        0x0072 => .lang1,
        0xE0F2 => .lang1,
        0x0071 => .lang2,
        0xE0F1 => .lang2,
        0x0070 => .kana_mode,
        0x007B => .non_convert,
        0xE053 => .delete,
        0xE04F => .end,
        0xE047 => .home,
        0xE052 => .insert,
        0xE051 => .page_down,
        0xE049 => .page_up,
        0xE050 => .arrow_down,
        0xE04B => .arrow_left,
        0xE04D => .arrow_right,
        0xE048 => .arrow_up,
        0xE045 => .num_lock,
        0x0052 => .numpad0,
        0x004F => .numpad1,
        0x0050 => .numpad2,
        0x0051 => .numpad3,
        0x004B => .numpad4,
        0x004C => .numpad5,
        0x004D => .numpad6,
        0x0047 => .numpad7,
        0x0048 => .numpad8,
        0x0049 => .numpad9,
        0x004E => .numpad_add,
        0x007E => .numpad_comma,
        0x0053 => .numpad_decimal,
        0xE035 => .numpad_divide,
        0xE01C => .numpad_enter,
        0x0059 => .numpad_equal,
        0x0037 => .numpad_multiply,
        0x004A => .numpad_subtract,
        0x0001 => .escape,
        0x003B => .f1,
        0x003C => .f2,
        0x003D => .f3,
        0x003E => .f4,
        0x003F => .f5,
        0x0040 => .f6,
        0x0041 => .f7,
        0x0042 => .f8,
        0x0043 => .f9,
        0x0044 => .f10,
        0x0057 => .f11,
        0x0058 => .f12,
        0x0064 => .f13,
        0x0065 => .f14,
        0x0066 => .f15,
        0x0067 => .f16,
        0x0068 => .f17,
        0x0069 => .f18,
        0x006A => .f19,
        0x006B => .f20,
        0x006C => .f21,
        0x006D => .f22,
        0x006E => .f23,
        0x0076 => .f24,
        0xE037 => .print_screen,
        0x0054 => .print_screen,
        0x0046 => .scroll_lock,
        0x0045 => .pause,
        0xE046 => .pause,
        0xE06A => .browser_back,
        0xE066 => .browser_favorites,
        0xE069 => .browser_forward,
        0xE032 => .browser_home,
        0xE067 => .browser_refresh,
        0xE065 => .browser_search,
        0xE068 => .browser_stop,
        0xE06B => .launch_app1,
        0xE021 => .launch_app2,
        0xE06C => .launch_mail,
        0xE022 => .media_play_pause,
        0xE06D => .media_select,
        0xE024 => .media_stop,
        0xE019 => .media_track_next,
        0xE010 => .media_track_previous,
        0xE05E => .power,
        0xE02E => .audio_volume_down,
        0xE020 => .audio_volume_mute,
        0xE030 => .audio_volume_up,
        else => .{ .unidentified = .{ .windows = @intCast(scancode) } },
    };
}
